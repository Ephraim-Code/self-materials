// Generated by LiveScript 1.3.0
(function(){
  return ldc.register(['auth', 'ldcvmgr', 'assetmgr', 'viewLocals', 'editor', 'payItem', 'notify'], function(arg$){
    var auth, ldcvmgr, assetmgr, viewLocals, editor, payItem, notify, local, stockinfo, lded, renderer, ref$, loadMod, loader, asset, id, config, ret, that;
    auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, assetmgr = arg$.assetmgr, viewLocals = arg$.viewLocals, editor = arg$.editor, payItem = arg$.payItem, notify = arg$.notify;
    local = {};
    stockinfo = {
      detail: {}
    };
    local.mod = {
      name: "Animated Background",
      desc: "Animated Background",
      license: "pro",
      id: "vanilla"
    };
    local.lded = lded = new ldEditor({
      root: '.lded',
      view: '.lded .viewer',
      renderer: renderer,
      fontconfig: editor.fontconfig,
      palconfig: editor.palconfig,
      modalconfig: editor.modalconfig,
      ui: {
        size: 'sm',
        'class': "lded-sparse lded-full",
        tab: {
          'class': 'nav-pills'
        }
      },
      action: {
        download: function(arg$){
          var act, lded, type, item;
          act = arg$.act, lded = arg$.lded;
          type = act === 'png' || act === 'staticsvg' ? 'attribute' : 'pay';
          item = {
            type: 'background',
            id: local.id,
            name: local.mod.name
          };
          return editor.action.download({
            act: act,
            item: item,
            type: type,
            lded: lded
          });
        },
        gopro: function(){
          return editor.action.gopro();
        },
        setPro: function(v){
          return editor.setPro(v, {
            lded: lded
          });
        },
        save: function(params){
          var payload;
          payload = {
            lded: lded,
            params: params,
            key: local.key,
            name: local.mod.name,
            type: 'background',
            payload: {
              id: local.id,
              config: params.config,
              slug: local.id
            }
          };
          return editor.action.save(payload).then(function(it){
            var that;
            it == null && (it = {});
            if (that = it.key) {
              return local.key = that;
            }
          });
        }
      }
    });
    renderer = new ModRenderer('.lded .viewer', {
      choosefont: lded.choosefont
    });
    lded.renderer = renderer;
    if (/gif=on/.exec(window.location.search)) {
      (ref$ = ModExt.background).support = ref$.support.concat(['gif', 'apng']);
    }
    ldc.on('auth.change', function(arg$){
      var user;
      user = arg$.user;
      return auth.userinfo(user).then(function(info){
        return lded.setPro(info.isPro);
      });
    });
    loadMod = function(id, preset, type, path){
      return ModManager.load('background', id, preset)['catch'](function(it){
        ldcvmgr.get("mod-load-failed");
        return console.log(it);
      }).then(function(mod){
        return local.mod = (mod.id = id, mod.license = 'pro', mod);
      }).then(function(){
        return renderer.initMod(local.mod, preset, {
          svg: path,
          type: type,
          args: stockinfo.detail.args
        });
      }).then(function(){
        return lded.setMod(local.mod);
      }).then(function(){
        return editor.grantType({
          id: id,
          type: type
        });
      }).then(function(it){
        if (it) {
          return lded.setPro(true);
        }
      }).then(function(){
        return lded.setConfig(preset);
      });
    };
    loader = {
      backgroundMod: function(id, config){
        return loadMod(id, config, 'mod');
      }
    };
    if (viewLocals) {
      window.stockinfo = {
        detail: {}
      };
      local.asset = asset = viewLocals;
      local.key = asset.key;
      import$(local, (ref$ = {
        id: (ref$ = asset.payload).id,
        config: ref$.config
      }, id = ref$.id, config = ref$.config, ref$));
    } else {
      ret = /\/background\/([^\/]+)/.exec(window.location.pathname);
      if (ret) {
        local.id = id = ret[1];
      }
    }
    if (that = /^m-(.+)$/.exec(id)) {
      loader.backgroundMod(that[1], config);
    } else {
      loader.backgroundMod(id, config);
    }
    ld$.find(document, '.lded .ctrl div[data-group=svg]', 0).classList.add('dropup');
    return ld$.find(document, '.lded .ctrl div[data-group=png]', 0).classList.add('dropup');
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}