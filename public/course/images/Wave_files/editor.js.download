// Generated by LiveScript 1.3.0
(function(){
  return ldc.register('editor', ['auth', 'ldcvmgr', 'assetmgr', 'notify', 'payItem', 'planChooser', 'error', 'loader'], function(arg$){
    var auth, ldcvmgr, assetmgr, notify, payItem, planChooser, error, loader, isPaidCache, isPaid, grantType, palettes, save, mypal, action, progress, ldbar, progressModal, download, buildfail, collectPal, api;
    auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, assetmgr = arg$.assetmgr, notify = arg$.notify, payItem = arg$.payItem, planChooser = arg$.planChooser, error = arg$.error, loader = arg$.loader;
    DOMPurify.addHook('afterSanitizeAttributes', function(node){
      var attr;
      attr = node.getAttribute('xlink:href') || node.getAttribute('href');
      if (attr && !(attr.match(/^#/) || attr.match(/^data:/))) {
        return node.remove();
      }
    });
    ScriptManager.path = {
      js: function(it){
        return /^https?:\/\//.exec(it)
          ? it
          : "/assets/mod/lib/" + it;
      },
      css: function(it){
        return "/assets/mod/lib/" + it;
      }
    };
    ModManager.modUrl = function(type, id, file){
      return "/mod/" + type + "/" + id + "/" + file;
    };
    isPaidCache = {};
    isPaid = function(arg$){
      var type, id;
      type = arg$.type, id = arg$.id;
      if (!(id && (type === 'pattern' || type === 'background' || type === 'icon' || type === 'spinner' || type === 'text'))) {
        return Promise.resolve(false);
      }
      loader.onLater(1000);
      return ld$.fetch('/d/purchase-list', {
        method: 'POST'
      }, {
        json: {
          type: type,
          id: id
        },
        type: 'json'
      }).then(function(it){
        return (it || []).filter(function(it){
          return it.item === id;
        }).length > 0;
      })['catch'](function(){
        return false;
      }).then(function(it){
        loader.cancel();
        return it;
      });
    };
    grantType = function(item, renew){
      renew == null && (renew = false);
      return auth.fetch({
        renew: renew
      }).then(function(it){
        var that;
        if (that = (it.user || (it.user = {})).plan) {
          return that.slug;
        }
        if (!item) {
          return null;
        }
        return isPaid(item).then(function(it){
          return it ? 'purchase' : null;
        });
      });
    };
    palettes = ldPalettePicker.get('loadingio');
    save = function(data, key){
      var ref$, ref1$;
      data = (ref1$ = {
        key: key,
        thumb: data.thumb
      }, ref1$.name = (ref$ = data.data).name, ref1$.type = ref$.type, ref1$.payload = ref$.payload, ref1$);
      return auth.ensure().then(function(){
        return assetmgr.save(data);
      }).then(function(it){
        if (key) {
          return notify.send('success', 'Saved.');
        }
        assetmgr.panel.on({
          link: window.location.origin + "/palette/" + it.key,
          newtab: true,
          hint: false
        });
        return {
          name: name,
          key: it.key,
          colors: data.payload.colors
        };
      })['catch'](error({
        ignore: [1000]
      }));
    };
    mypal = new ldPage({
      limit: 50,
      fetch: function(){
        return ld$.fetch("/d/asset/palette/me?offset=" + (this.offset || 0) + "&limit=" + this.limit, {}, {
          type: 'json'
        }).then(function(ret){
          return this.list = ret.map(function(it){
            return import$(it.payload, {
              key: it.key,
              name: it.name,
              colors: it.payload.colors.map(function(it){
                return ldColor.rgbaStr(it.value || it);
              })
            });
          });
        });
      }
    });
    action = {};
    action.download = function(arg$){
      var ref$, act, item, type, ref1$, panel, lded, buildInfo;
      ref$ = arg$ != null
        ? arg$
        : {}, act = ref$.act, item = ref$.item, type = (ref1$ = ref$.type) != null ? ref1$ : 'pay', panel = (ref1$ = ref$.panel) != null ? ref1$ : 'pay', lded = ref$.lded;
      buildInfo = function(g){
        return auth.userinfo(g.user).then(function(it){
          if (it.isBlocked) {
            return {
              act: 'block'
            };
          } else if (it.isPro) {
            return true;
          } else {
            return isPaid(item);
          }
        });
      };
      if (lded.isLimited()) {
        type = 'pay';
      }
      return auth.ensure({
        info: type === 'pay' ? 'pay' : 'free'
      }).then(function(){
        return auth.fetch({
          renew: true
        });
      }).then(function(it){
        return buildInfo(it);
      }).then(function(it){
        var promise;
        if (it) {
          return it;
        }
        promise = panel === 'pay'
          ? payItem.prompt({
            item: item,
            type: type,
            content: null
          })
          : planChooser.prompt();
        return promise.then(function(it){
          if (!it) {
            throw new ldError(999);
          } else {
            return it;
          }
        });
      }).then(function(it){
        if (it) {
          return it;
        } else if (type === 'free') {
          return true;
        } else {
          return auth.fetch().then(function(it){
            return buildInfo(it);
          });
        }
      })['catch'](error({
        ignore: [999, 1000]
      }));
    };
    action.gopro = function(){
      return auth.ensure().then(function(g){
        if ((g.user || (g.user = {})).plan) {
          return true;
        }
        return planChooser.prompt().then(function(){
          return auth.fetch();
        }).then(function(g){
          return g ? (g.user || (g.user = {})).plan : null;
        });
      });
    };
    action.save = function(opt){
      var lded, params, key, name, type, payload;
      lded = opt.lded, params = opt.params, key = opt.key, name = opt.name, type = opt.type, payload = opt.payload;
      lded.loading.bk.off();
      return auth.ensure().then(function(){
        var args;
        lded.loading.bk.on();
        args = {
          thumb: params.thumb,
          key: key,
          name: name,
          type: type,
          payload: payload
        };
        if (opt.upload) {
          args.upload = opt.upload;
        }
        return assetmgr.save(args);
      }).then(function(it){
        it == null && (it = {});
        if (key && it.key === key) {
          notify.send('success', 'Saved.');
          return it.key;
        }
        assetmgr.panel.on({
          link: window.location.origin + "/asset/" + it.key
        });
        return it.key;
      })['catch'](error({
        ignore: [1000]
      }));
    };
    progress = new ldLoader({
      root: '.ldcv[data-name=building] svg',
      ctrl: {
        step: function(){
          return ldbar.set(Math.round((progress.data || (progress.data = {})).value), false);
        },
        init: function(){
          return (progress.data || (progress.data = {})).value = 0;
        }
      }
    });
    progress.on = function(){
      progressModal.toggle(true);
      return this.toggle(true);
    };
    progress.off = function(){
      progressModal.toggle(false);
      return this.toggle(false);
    };
    ldbar = new ldBar('.ldcv[data-name=building] .ldBar');
    ldbar.set(0);
    progressModal = new ldCover({
      root: '.ldcv[data-name=building]'
    });
    download = new ldCover({
      root: '.ldcv[data-name=download]'
    });
    buildfail = new ldCover({
      root: '.ldcv[data-name=buildfail]'
    });
    collectPal = new ldCover({
      root: '.ldcv[data-name=collectPal]'
    });
    return api = {
      isPaid: isPaid,
      grantType: grantType,
      palconfig: {
        save: save,
        mypal: mypal,
        palettes: palettes,
        useClusterizejs: true
      },
      fontconfig: {
        metaUrl: "/assets/choosefont.js/fontinfo/meta.json",
        base: "https://plotdb.github.io/xl-fontset/alpha"
      },
      action: action,
      modalconfig: {
        progress: progress,
        download: download,
        buildfail: buildfail,
        collectPal: collectPal
      },
      setPro: debounce(1000, function(v, arg$){
        var ref$, lded, showTaglet, ref1$;
        ref$ = arg$ != null
          ? arg$
          : {}, lded = ref$.lded, showTaglet = (ref1$ = ref$.showTaglet) != null ? ref1$ : true;
        return Promise.resolve().then(function(){
          if (v != null) {
            return Promise.resolve(v);
          } else {
            return auth.get().then(function(arg$){
              var user;
              user = arg$.user;
              return !!(user.plan || (user.plan = {})).slug;
            });
          }
        }).then(function(isPro){
          var accountInfo;
          if (accountInfo = ld$.find(document, '#editor .account-info', 0)) {
            ld$.find(accountInfo, '.free-info', 0).classList.toggle('d-none', !!isPro);
          }
          if (!lded) {
            return;
          }
          return ld$.find(lded.root, ".lded .ctrl .download a[data-action]").map(function(n){
            var act, x$;
            if (!showTaglet) {
              return n.classList.toggle('with-taglet', false);
            }
            act = n.getAttribute('data-action');
            if (Array.isArray(showTaglet) && !in$(act, showTaglet)) {
              return;
            }
            x$ = n.classList;
            x$.add(act === 'png' || act === 'staticsvg' ? 'lic-by' : 'lic-pro');
            x$.add(n.classList.contains('dropdown-item') ? 'right' : 'bottom');
            x$.add('after');
            x$.toggle('with-taglet', !isPro);
            return x$;
          });
        });
      })
    };
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}